from .calldata import Project, Reviews

from core.settings import settings
from core.database.database import get_all_id_admin

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def start(user_id) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="ü§ñ –ë–æ—Ç—ã", callback_data="bot"),
            InlineKeyboardButton(text="üñ• –°–∞–π—Ç—ã", callback_data="site"),
            InlineKeyboardButton(text="üé® –î–∏–∑–∞–π–Ω", callback_data="design"),
         ],
        [
            InlineKeyboardButton(text="üí¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data=f"see_review"),
            InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"add_review")
        ],
        [InlineKeyboardButton(text="üìå –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
    ]
    if user_id in (get_all_id_admin()):
        buttons.append([InlineKeyboardButton(text='‚≠êÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', callback_data="admin")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def site(link: str) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üñ• –ù–∞—à —Å–∞–π—Ç", url=link)],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
               ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def menu_projects(num_records: int, type_p: str) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                 callback_data=Project(types=type_p, action="edit", id_proj=num_records, value=-1).pack()),
            InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start"),
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è",
                                 callback_data=Project(types=type_p, action="edit", id_proj=num_records, value=1).pack())
        ],
        [InlineKeyboardButton(text="‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è",
                              callback_data=Project(types=type_p, action="like", id_proj=num_records).pack())]
    ]
    builder = InlineKeyboardBuilder(buttons)
    return builder.as_markup()


def menu_reviews(review_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=Reviews(action="edit", review_id=review_id, value=-1).pack()),
            InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=Reviews(action="edit", review_id=review_id, value=1).pack())
        ],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="start")]
    ]
    builder = InlineKeyboardBuilder(buttons)
    return builder.as_markup()


def check_up() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üü¢ –î–∞", callback_data="yes"),
            InlineKeyboardButton(text="üî¥ –ù–µ—Ç", callback_data="no")
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def check_review_admin(id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üü¢ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_review-{id}"),
            InlineKeyboardButton(text="üî¥ —É–¥–∞–ª–∏—Ç—å", callback_data=f"del_review-{id}")
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def verif_yes():
    buttons = [[InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚úÖ", callback_data="save")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def verif_no():
    buttons = [[InlineKeyboardButton(text="–£–¥–∞–ª–µ–Ω–æ! ‚ùå", callback_data="del")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def admin_menu(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üîä –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="notif")],
        [InlineKeyboardButton(text="üí¨ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_start_mess")],
        [InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="edit_contact_mess")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="view_statistics")]
    ]
    if user_id == settings.bots.admin_id:
        buttons.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
                        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="del_admin")])
    buttons.append([InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="start")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def confirmation(txt_y: str = "–î–∞", txt_n: str = "–ù–µ—Ç", cd_y: str = "yes", canc_data: str = "admin"):
    buttons = [
        [
            InlineKeyboardButton(text=txt_y, callback_data=cd_y),
            InlineKeyboardButton(text=txt_n, callback_data="no")
        ],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=canc_data)]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def state_cancel() -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="state_cancel"))
    return builder


def cancel_admin():
    buttons = [[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def del_admin(admins: dict):
    buttons = []
    for i in admins:
        buttons.append([InlineKeyboardButton(text=i["username"], callback_data=f"del_{i['user_id']}")])
    buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def create_choose_city_buttons_stat(n: int, city: list):
    n -= 1
    n *= 6
    builder = InlineKeyboardBuilder()
    for i in range(6):
        if n + i <= len(city) - 1:
            button = InlineKeyboardButton(
                text=city[n + i],
                callback_data=f"city_{n + i}")
        else:
            button = InlineKeyboardButton(
                text="‚ûñ",
                callback_data=f"none")
        if (n + i) % 3 == 0 or (n + i) % 3 == 3:
            builder.row(button)
        else:
            builder.add(button)
    builder.row(InlineKeyboardButton(
        text="<--",
        callback_data=f"city_back")
    )
    builder.add(InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data=f"cancel_form")
    )
    builder.add(InlineKeyboardButton(
        text="-->",
        callback_data=f"city_next")
    )
    return builder.as_markup()


def custom_btn(text: str, cldata: str):
    buttons = [[InlineKeyboardButton(text=text, callback_data=cldata)]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

